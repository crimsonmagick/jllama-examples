plugins {
  id 'groovy'
  id 'org.springframework.boot' version '3.2.1'
  id 'io.spring.dependency-management' version '1.1.4'
  id 'io.freefair.lombok' version "8.4"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
  mavenLocal()
  maven {
    name = 'OSSRH'
    url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
  }
  mavenCentral()
}

ext {
  log4j2Version = '2.20.0'
  jLlamaVersion = '0.0.1-SNAPSHOT'
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation "org.apache.logging.log4j:log4j-core:${log4j2Version}"
  implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4j2Version}"
  implementation 'com.knuddels:jtokkit:0.6.1'
  implementation 'com.h2database:h2:2.2.224'
  implementation 'io.r2dbc:r2dbc-h2:1.0.0.RELEASE'

  implementation "net.jllama:jni-bindings:${jLlamaVersion}"
  // Linux
  implementation "net.jllama:jni-implementation:${jLlamaVersion}:linux_x64"
  implementation "net.jllama:llama-cpp:${jLlamaVersion}:linux_x64"
  // Mac
  implementation "net.jllama:jni-implementation:${jLlamaVersion}:os_x_arm64"
  implementation "net.jllama:llama-cpp:${jLlamaVersion}:os_x_arm64"
//   Windows
  implementation "net.jllama:jni-implementation:${jLlamaVersion}:windows_x64"
  implementation "net.jllama:llama-cpp:${jLlamaVersion}:windows_x64"

  implementation platform('org.apache.groovy:groovy-bom:4.0.5')
  implementation 'org.apache.groovy:groovy'

  testImplementation platform("org.spockframework:spock-bom:2.3-groovy-4.0")
  testImplementation "org.spockframework:spock-core"
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'io.projectreactor:reactor-test'
}

tasks.named('test') {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
}

import static org.gradle.internal.os.OperatingSystem.current

bootRun {
  jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005']
  // Uncomment below for testing custom builds of jni-implementation and llama-cpp
//  final jniBuildType = 'release'
//  final llamaCppBuildType = 'release'
//  final bridgeRelativePath = "/build-cmake-${jniBuildType}/jni-implementation/${jniBuildType}"
//  final bridgeAbsolutePath = parent.projectDir as String + bridgeRelativePath
//  systemProperty 'java.library.path', bridgeAbsolutePath
//  final llamaRelativePath = "/build-cmake-${llamaCppBuildType}/llama/${llamaCppBuildType}"
//  final String llamaAbsolutePath = parent.projectDir as String + llamaRelativePath
//  final dllPath = current().isWindows() ? 'PATH' :
//      current().isMacOsX() ? 'DYLD_LIBRARY_PATH' : 'LD_LIBRARY_PATH'
//  final envVariableValue = System.getenv(dllPath) ? System.getenv(dllPath) : ''
//  environment dllPath, "${envVariableValue}${File.pathSeparator}${llamaAbsolutePath}"
}